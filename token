from itsdangerous import TimedJSONWebSignatureSerializer as Serializer
from flask import current_app
from . import db
class User(UserMixin, db.Model):
# ...
confirmed = db.Column(db.Boolean, default=False)
def generate_confirmation_token(self, expiration=3600):
s = Serializer(current_app.config['SECRET_KEY'], expiration)
return s.dumps({'confirm': self.id})
def confirm(self, token):
s = Serializer(current_app.config['SECRET_KEY'])
try:
  data = s.loads(token)
  except:
    return False
  if data.get('confirm') != self.id:
    return False
  self.confirmed = True
  db.session.add(self)
  return True



from ..email import send_email
@auth.route('/register', methods = ['GET', 'POST'])
def register():
  form = RegistrationForm()
  if form.validate_on_submit():
    # ...
    db.session.add(user)
    db.session.commit()
    token = user.generate_confirmation_token()
    send_email(user.email, 'Confirm Your Account',
	       'auth/email/confirm', user=user, token=token)
    flash('A confirmation email has been sent to you by email.')
        return redirect(url_for('main.index'))
      return render_template('auth/register.html', form=form)
    Note that a db.session.commit() call had to be added, even
        Dear {{ user.username }},
        Welcome to Flasky!
        To confirm your account please click on the following link:
	  {{ url_for('auth.confirm', token=token, _external=True) }}
	  Sincerely,
	  The Flasky Team
	  Note: replies to this email address are not monitored.	
	  	  @auth.route('/confirm')
	  	  @login_required
	  	  def resend_confirmation():
		    token = current_user.generate_confirmation_token()
		    send_email('auth/email/confirm',
		 'Confirm Your Account', user, token=token)
		    flash('A new confirmation email has been sent to you by email.')
		    return redirect(url_for('main.index'))